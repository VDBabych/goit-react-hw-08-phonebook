{"version":3,"file":"static/js/667.0b2aee82.chunk.js","mappings":"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","sources":["components/Contacts/Contacts.jsx","components/Contacts/Filter.jsx","components/FormPhonebook/FormPhonebook.jsx","Page/UserContacts.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { BsFillTelephoneFill } from 'react-icons/bs';\nimport {\n  Text,\n  Button,\n  ListItem,\n  ListIcon,\n  Heading,\n  UnorderedList,\n} from '@chakra-ui/react';\nimport { fetchContacts, deleteContact } from 'redux/contactsOperations';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ColorRing } from 'react-loader-spinner';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const { items, isLoading, error } = useSelector(\n    state => state.contacts.contacts\n  );\n\n  const filter = useSelector(state => state.filter.filter);\n  const filterArr = items.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  const onClickDeleteContact = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <UnorderedList>\n      {isLoading && (\n        <ColorRing\n          visible={true}\n          height=\"80\"\n          width=\"80\"\n          ariaLabel=\"blocks-loading\"\n          wrapperClass=\"blocks-wrapper\"\n          colors={['#b8c480', '#B2A3B5', '#F4442E', '#51E5FF', '#429EA6']}\n        />\n      )}\n      {error && <Heading as=\"h2\"> An error occured {error}</Heading>}\n      {items.length === 0 ? (\n        <Text>There are no contact</Text>\n      ) : filter !== '' ? (\n        filterArr.map(({ name, id, number }) => {\n          return (\n            <ListItem\n              key={id}\n              display=\"flex\"\n              gap=\"15px\"\n              alignItems=\"center\"\n              marginBottom=\"10px\"\n            >\n              <ListIcon as={BsFillTelephoneFill} color=\"teal\" />\n              <Text as=\"span\" fontSize=\"large\">\n                {name} : {number}\n              </Text>\n              <Button\n                type=\"button\"\n                colorScheme=\"teal\"\n                h=\"30px\"\n                onClick={() => onClickDeleteContact(id)}\n              >\n                X\n              </Button>\n            </ListItem>\n          );\n        })\n      ) : (\n        items.map(({ name, id, number }) => {\n          return (\n            <ListItem\n              key={id}\n              display=\"flex\"\n              gap=\"15px\"\n              alignItems=\"center\"\n              marginBottom=\"10px\"\n            >\n              <ListIcon as={BsFillTelephoneFill} color=\"teal\" />\n              <Text as=\"span\" fontSize=\"large\">\n                {name} : {number}\n              </Text>\n              <Button\n                colorScheme=\"teal\"\n                h=\"30px\"\n                type=\"button\"\n                onClick={() => onClickDeleteContact(id)}\n              >\n                X\n              </Button>\n            </ListItem>\n          );\n        })\n      )}\n    </UnorderedList>\n  );\n};\nContacts.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\nexport default Contacts;\n","import PropTypes from 'prop-types';\nimport { Text, Input } from '@chakra-ui/react';\nimport { addFilter } from 'redux/filterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.filter.filter);\n  const onChangeFilterContact = e => {\n    dispatch(addFilter(e.target.value));\n  };\n\n  return (\n    <>\n      <Text as=\"label\" m=\"10px 0\" display=\"block\">\n        Find contacts by name{' '}\n        <Input\n          type=\"text\"\n          name=\"filter\"\n          value={filter}\n          onChange={onChangeFilterContact}\n        />\n      </Text>\n    </>\n  );\n};\nFilter.propTypes = {\n  filter: PropTypes.string,\n};\nexport default Filter;\n","import React from 'react';\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contactsOperations';\nimport { nanoid } from 'nanoid';\nimport {\n  FormControl,\n  FormLabel,\n  Heading,\n  Input,\n  Button,\n} from '@chakra-ui/react';\n\nconst FormPhonebook = () => {\n  const [nameContact, setNameContact] = useState('');\n  const [numberContact, setNumberContact] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.contacts.items);\n\n  const saveData = e => {\n    switch (e.currentTarget.name) {\n      case 'name':\n        setNameContact(e.currentTarget.value);\n        break;\n      case 'number':\n        setNumberContact(e.currentTarget.value);\n        break;\n      default:\n        return;\n    }\n  };\n  const onSubmitAddContact = e => {\n    e.preventDefault();\n    if (contacts.find(contact => contact.name === nameContact)) {\n      alert(`${nameContact} is already in contacts`);\n      setNameContact('');\n      setNumberContact('');\n      return;\n    }\n    const contact = {\n      name: nameContact,\n      number: numberContact,\n      id: nanoid(),\n    };\n    dispatch(addContact(contact));\n    setNameContact('');\n    setNumberContact('');\n  };\n\n  return (\n    <FormControl\n      onSubmit={onSubmitAddContact}\n      autoComplete=\"off\"\n      as=\"form\"\n      w=\"40%\"\n      m=\"60px auto 0px\"\n      align=\"center\"\n    >\n      <Heading>Phonebook</Heading>\n      <FormLabel>Name</FormLabel>\n      <Input\n        isInvalid={nameContact === ''}\n        onChange={saveData}\n        value={nameContact}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        isRequired\n      />\n      <FormLabel>Number </FormLabel>\n      <Input\n        isInvalid={numberContact === ''}\n        onChange={saveData}\n        value={numberContact}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        isRequired\n      />\n      <Button mt={4} colorScheme=\"teal\" type=\"submit\">\n        Add contact\n      </Button>\n    </FormControl>\n  );\n};\n\nFormPhonebook.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\nexport default FormPhonebook;\n","import Contacts from 'components/Contacts/Contacts';\nimport Filter from 'components/Contacts/Filter';\nimport FormPhonebook from 'components/FormPhonebook/FormPhonebook';\nimport { useSelector } from 'react-redux';\nimport { Box, Heading } from '@chakra-ui/react';\nimport PropTypes from 'prop-types';\nconst UserContacts = () => {\n  const isLoggedIn = useSelector(state => state.auth.isLoggedIn);\n  return (\n    <>\n      {isLoggedIn ? (\n        <main>\n          <FormPhonebook />\n          <Box w=\"40%\" m=\"60px auto 0px\">\n            <Heading as=\"h2\" textAlign=\"center\" mb=\"10px\">\n              Contacts\n            </Heading>\n            <Filter />\n            <Contacts />\n          </Box>\n        </main>\n      ) : (\n        <p>Please Authozate</p>\n      )}\n    </>\n  );\n};\nUserContacts.propTypes = {\n  isLoggedIn: PropTypes.bool,\n};\nexport default UserContacts;\n"],"names":["dispatch","useDispatch","useSelector","state","contacts","items","isLoading","error","filter","filterArr","contact","name","toLowerCase","includes","onClickDeleteContact","contactId","deleteContact","useEffect","fetchContacts","visible","height","width","ariaLabel","wrapperClass","colors","as","length","map","id","number","display","gap","alignItems","marginBottom","BsFillTelephoneFill","color","fontSize","type","colorScheme","h","onClick","m","I","value","onChange","e","addFilter","target","useState","nameContact","setNameContact","numberContact","setNumberContact","saveData","currentTarget","onSubmit","preventDefault","find","alert","nanoid","addContact","autoComplete","w","align","isInvalid","pattern","title","required","isRequired","mt","isLoggedIn","auth","textAlign","mb"],"sourceRoot":""}